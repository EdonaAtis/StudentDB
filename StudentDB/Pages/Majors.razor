@page "/majors"
@layout MainLayout
@using Student.DataModels
@using Student.DataModels.Models
@using Microsoft.EntityFrameworkCore
@using Blazored.SessionStorage;
@inject ApplicationDbContext DbContext
@inject NavigationManager navManager
@inject ISessionStorageService sessionStorage
@inherits StudentDB.Pages.MajorsBase


<h3>Majors</h3>

<div class="container">
    <div class="row">
        <div class="col-3">
            <div class="list-group">
                @foreach (var field in fieldsOfStudy)
                {
                    <button class="list-group-item list-group-item-action" @onclick="() => ShowStudentsInField(field)">@field</button>
                }
            </div>
        </div>
        <div class="col-9">
            @if (isLoggedIn)
            {
                <p><strong>Logged in as:</strong> @adminName</p>
                <p><strong>Roles:</strong> @string.Join(", ", userRoles)</p>

                @if (isSuperAdmin)
                {
                    <p><strong>You are logged in as a SuperAdmin!</strong></p>
                    <div>
                        <a class="btn btn-primary" href="/createcourse">Create Course</a>
                    </div>
                    
                }
                else
                {
                    <p>You are logged in, but not as a SuperAdmin.</p>
                }
            }
            else
            {
                <p>You are not logged in.</p>
            }

            @if (studentsInField != null && studentsInField.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Email</th>
                            <th>Phone Number</th>
                            <th>Field Of Study</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in studentsInField)
                        {
                            <tr>
                                <td>@student.Id</td>
                                <td>@student.FirstName</td>
                                <td>@student.LastName</td>
                                <td>@student.EmailAddress</td>
                                <td>@student.PhoneNumber</td>
                                <td>@student.FieldOfStudy</td>
                                <td>
                                    <a href="@($"/studentprofile/{student.Id}")">View Courses</a> |
                                    <a href="@($"/editstudent/{student.Id}")">Edit</a>
                                    <button class="btn btn-danger" @onclick="() => ConfirmDeleteStudent(student.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@if (showDeleteConfirmation)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="CancelDelete" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this student?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteStudent(confirmedStudentId)">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<string> userRoles = new List<string>();
    private bool isSuperAdmin = false;
    private bool isLoggedIn = false;
    private string adminName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve roles and name from session storage
        var rolesString = await sessionStorage.GetItemAsync<string>("adminRoles");
        adminName = await sessionStorage.GetItemAsync<string>("adminName");

        if (!string.IsNullOrEmpty(rolesString))
        {
            userRoles = rolesString.Split(',').ToList();
            isSuperAdmin = userRoles.Any(role => string.Equals(role, "SuperAdmin", StringComparison.OrdinalIgnoreCase));
            isLoggedIn = true;
        }

        // Debugging output
        Console.WriteLine("User is authenticated: " + isLoggedIn);
        Console.WriteLine("User roles: " + string.Join(", ", userRoles));
    }

 
}